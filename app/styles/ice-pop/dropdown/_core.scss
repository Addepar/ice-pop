/*
Ice Dropdown

A dropdown that is triggered upon clicking a target element.

You can implement a dropdown type class and custom placement with the Ember addon like this:
```
{{#ice-dropdown position="left-start" class="custom-class"}}
  Menu
{{/ice-dropdown}}
```

#### Important
Note that dropdowns are an offical Ember addon in ice-pop,
so please do not use the below example HTML directly.
Please use the Ember component instead.
[See Ice Dropdown Docs >>](/docs/ice-pop/class/addon/components/ice-dropdown.js~IceDropdown.html)

Markup:
<div class="ice-dropdown is-visible [modifier-class]" x-placement="left-start">
  <div class="ice-dropdown-content">
    Menu
  </div>
</div>

Styleguide Ice Pop - Ice Dropdown
*/

.ice-dropdown {
  position: absolute;
  z-index: $ice-dropdown-z-index;

  background: $ice-dropdown-background-color;
  padding: $ice-dropdown-box-padding;

  border: $ice-dropdown-border-width $ice-dropdown-border-style $ice-dropdown-border-color;
  border-radius: $ice-dropdown-border-radius;
  box-shadow: $ice-dropdown-box-shadow;

  color: $ice-dropdown-text-color;
  text-align: $ice-dropdown-text-align;
  font-weight: $ice-dropdown-font-weight;
  font-size: $ice-dropdown-font-size;
  line-height: $ice-dropdown-line-height;
  font-family: $ice-dropdown-font-family;

  transition: $ice-dropdown-fade-transition;
  opacity: 0;

  &.is-visible {
    opacity: 1;
  }

  // Determine placement of box shadow and offset depending on direction
  // TODO: Make a fancy mixin/function for this
  &[x-placement^="bottom"] {
    box-shadow: $ice-dropdown-box-shadow;
    margin-top: $ice-dropdown-offset;
  }

  &[x-placement^="top"] {
    box-shadow: 0 -3px 8px 2px rgba(51,51,51,0.20);
    margin-bottom: $ice-dropdown-offset;
  }

  &[x-placement^="left"] {
    box-shadow: -3px 0 8px 2px rgba(51,51,51,0.20);
    margin-right: $ice-dropdown-offset;
  }

  &[x-placement^="right"] {
    box-shadow: 3px 0 8px 2px rgba(51,51,51,0.20);
    margin-left: $ice-dropdown-offset;
  }
}

// Content level elements

.ice-dropdown-content {
  // We theoretically should not be making super long dropdown menus,
  // but just in case, this sets up the content area to scroll if needed
  overflow: auto;
  min-width: $ice-dropdown-min-width;
  max-width: $ice-dropdown-max-width;

  // We need to check whether a vh height was set (which is by default,
  // but the user may overwrite to '0' or 'none').
  // If set, we need to add the optional max pixel height css media query (explained below).
  @if non-zero-value($ice-dropdown-max-height-vh) {
    max-height: $ice-dropdown-max-height-vh;
    // If the dropdown has been given a vh max height AND a px max height, we want to
    // cap the max-height out once the rendered vh height gets longer than the px amount given.
    // Until there is a better way to cap percentage/viewport based values like this, we are using a media query.
    //
    // Checking if px value was given, otherwise we don't need to do anything
    @if non-zero-value($ice-dropdown-max-height-px) {
      // Figure out the ratio of the given vh height to the current screen height
      $viewport-ratio: $ice-dropdown-max-height-vh / 100vh;
      $viewport-adjusted-height: $ice-dropdown-max-height-px / $viewport-ratio;
      @media screen and (min-height: $viewport-adjusted-height) {
        max-height: $ice-dropdown-max-height-px;
      }
    }
  } @else {
    // If vh var was not set, we need to set the given pixel height onto the content div, since it
    // will not have been set in the mixin (we give the mixin the vh var by default)
    max-height: $ice-dropdown-max-height-px;
  }
}
